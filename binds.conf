# vim: set ft=tmux

# General settings
setw -g mode-keys vi          # Use vi-style key bindings in copy mode
set -g status-keys emacs      # Use emacs-style key bindings in the status line
set -g xterm-keys on          # Enable xterm-style keys

# Set new prefix (Ctrl-a)
unbind-key C-b                    # Unbind the default prefix (Ctrl-b)
set -g prefix C-a                 # Set the new prefix to Ctrl-a
bind-key C-a send-prefix          # Allow sending the prefix key (Ctrl-a)

# Config reload
bind-key R source ~/.config/tmux/tmux.conf \; display-message "tmux.conf reloaded"  # Reload tmux config

# Split windows
bind-key "|" split-window -fh -c "#{pane_current_path}"  # Split vertically with full height
bind-key "%" split-window -hc "#{pane_current_path}"     # Split vertically with current pane height
bind-key '"' split-window -vc "#{pane_current_path}"     # Split horizontally with current pane length
bind-key '_' split-window -fl "#{pane_height}"           # Split horizontally with full length 
unbind-key "J" # Default: join-pane
bind-key J command-prompt -p "Join to window:" "join-pane -t '%%'" # Join the current pane into another window
unbind-key "M" # Default: select-pane -M
bind-key M command-prompt -p "Move to window:" "move-pane -t '%%'" # Move the current pane to another window
unbind-key "S" # Default: split-window
bind-key S command-prompt -p "Swap with window.pane:" "swap-pane -s '%%' -t '%%'" # Swap panes between windows

# Display pane numbers for interactive selection
bind-key P display-panes
# Close a window or pane
unbind-key C-Q                    # Unbind default close window
bind-key C-Q kill-window        # bind Q to kill the current window
unbind-key C-q                      # Unbind default close pane
bind-key C-q kill-pane          # bind q to kill the current pane

# Check if the current pane is running Vim or Neovim
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?\.?(view|n?vim?x?)(-wrapped)?(diff)?$'"

# Bind keys for pane navigation in normal mode
# If in Vim/Neovim, send the corresponding key to Vim/Neovim
# Otherwise, use the prefix key before the navigation command to avoid overriding ZSH shortcuts
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h' { if -F '#{pane_at_left}' '' 'select-pane -L' }
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j' { if -F '#{pane_at_bottom}' '' 'select-pane -D' }
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k' { if -F '#{pane_at_top}' '' 'select-pane -U' }
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l' { if -F '#{pane_at_right}' '' 'select-pane -R' }

# Bind keys for pane navigation in copy mode (vi-style)
# These bindings are only active in copy mode, so they won't interfere with ZSH shortcuts
bind-key -T copy-mode-vi 'C-h' if -F '#{pane_at_left}' '' 'select-pane -L'
bind-key -T copy-mode-vi 'C-j' if -F '#{pane_at_bottom}' '' 'select-pane -D'
bind-key -T copy-mode-vi 'C-k' if -F '#{pane_at_top}' '' 'select-pane -U'
bind-key -T copy-mode-vi 'C-l' if -F '#{pane_at_right}' '' 'select-pane -R'

# Bind keys for resizing panes in normal mode
# If in Vim/Neovim, send the corresponding key to Vim/Neovim
# Otherwise, use the prefix key before the resize command to avoid overriding ZSH shortcuts
bind -n 'M-h' if-shell "$is_vim" 'send-keys M-h' 'resize-pane -L 1'
bind -n 'M-j' if-shell "$is_vim" 'send-keys M-j' 'resize-pane -D 1'
bind -n 'M-k' if-shell "$is_vim" 'send-keys M-k' 'resize-pane -U 1'
bind -n 'M-l' if-shell "$is_vim" 'send-keys M-l' 'resize-pane -R 1'

# Bind keys for resizing panes in copy mode (vi-style)
# These bindings are only active in copy mode, so they won't interfere with ZSH shortcuts
bind-key -T copy-mode-vi M-h resize-pane -L 1
bind-key -T copy-mode-vi M-j resize-pane -D 1
bind-key -T copy-mode-vi M-k resize-pane -U 1
bind-key -T copy-mode-vi M-l resize-pane -R 1

# Tmux version-specific bindings
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if -F \"#{@pane_is_vim}\" 'send-keys C-\\' 'select-pane -l'"  # bind C-\ for tmux < 3.0
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if -F \"#{@pane_is_vim}\" 'send-keys C-\\\\' 'select-pane -l'"  # bind C-\ for tmux >= 3.0

# Projects
bind-key C-Enter popup -E -h 80% -w 80% "dev"  # bind Enter to open a popup window for "dev"

# Navi
bind-key -T prefix C-g split-window \
  "$SHELL --login -i -c 'navi --print | head -n 1 | tmux load-buffer -b tmp - ; \
  tmux paste-buffer -p -t {last} -b tmp -d'"  # bind Ctrl+g to open navi in a split window, 
                                             # copy the first line of output to a buffer, 
                                             # and paste it into the last active pane
